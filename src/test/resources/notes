/*
 * Copyright 2020 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.gov.hmrc.perftests.traderServices

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.http.request.builder.HttpRequestBuilder
import uk.gov.hmrc.performance.conf.ServicesConfiguration

object TraderServicesRequests extends ServicesConfiguration with SaveToGatlingSessions {

  //http://localhost:9379/subscription?continue=http%3A%2F%2Flocalhost%3A9379%2Ftrader-services

  val baseUrl: String = baseUrlFor("trader-services-route-one-frontend")
  val loginUrl: String = readProperty("loginUrl")
  //  val createUserUrl: String = readProperty("createUserUrl")
  val confirmUserUrl: String = readProperty("confirmUserUrl")
  val homePageUrl: String = readProperty("landingpageUrl")

  val redirectUrl: String = if (runLocal) {
    "http://localhost:9379/trader-services"
  } else {
    "https://staging.tax.service.gov.uk/trader-services"
  }

  val decDetailsUrl: String = "/pre-clearance/declaration-details"
  val importQsPrefix: String = "/pre-clearance/import-questions"
  val exportQsPrefix: String = "/pre-clearance/import-questions"
  val requestPage: String = "/request-type"
  val routePage: String = "/route-type"

  val baseUrlExternalStubs: String = baseUrlFor("agents-external-stubs")
  val postSignInUrl = s"$baseUrlExternalStubs/agents-external-stubs/sign-in"
  val updateCurrentUserUrl = s"$baseUrlExternalStubs/agents-external-stubs/users"

  val loginSubmitUrl: String = readProperty("loginSubmitUrl")
  //  val destroyPlanetUrl = "http://localhost:9099/agents-external-stubs/"

  def destroyPlanetUrl = s"$baseUrlExternalStubs/agents-external-stubs/planets/"

  val signInUrl: String = "http://localhost:9025/gg/sign-in"
  val createUserUrl: String = "http://localhost:9025/agents-external-stubs/user/create"


  def authenticate_User: HttpRequestBuilder =
    http("Authenticate a user")
      .post(postSignInUrl)
      .check(status.is(201))
      .check(saveUserDetailsUrl)
      .check(saveBearerTokenHeader)
      .check(saveSessionIdHeader)
      .check(savePlanetIdHeader)
      .check(saveUserIdHeader)
      .silent

  def update_UserRole: HttpRequestBuilder =
    http("Update a current user to have Stride TBC role")
      .put(updateCurrentUserUrl)
      .body(StringBody(updateUserBodyAgent))
      .header("Content-Type", "application/json")
      .header("Authorization", "Bearer ${bearerToken}")
      .check(status.is(202))
      .check(header("Location").is("/agents-external-stubs/users/${userId}"))
      .silent

  val updateUserBodyAgent: String =
    """
      |{
      | "userId": "${userId}",
      | "planetId": "${planetId}",
      | "affinityGroup": "Individual",
      | "principalEnrolment[0].key", "HMRC-CUS-ORG"
      |}
""".stripMargin


  def destroy_UserPlanet: HttpRequestBuilder =
    http("Destroy planet")
      .delete(destroyPlanetUrl)
      .header("Authorization", "Bearer ${bearerToken}")
      .check(status.is(204))
      .silent

  // ****************************************************************************************************************//

  def getStrideLogin_Page: HttpRequestBuilder = {
    http("Get Stride login stub page to login")
      .get(s"$loginUrl")
      .check(status.is(200))
      .check(saveCsrfToken)
      .check(regex("Sign in"))
      .silent
  }

  def postsuccessful_Login: HttpRequestBuilder = {
    http("Login  with user stride user credentials")
      .post(loginSubmitUrl)
      .formParam("csrfToken", "${csrfToken}")
      .formParam("userId", "${userId}")
      .formParam("planetId", "${planetId}")
      .formParam("affinityGroup", "Individual")
      .formParam("principalEnrolment[0].key", "HMRC-CUS-ORG")
      .check(status.is(303))
      .check(header("Location").is(redirectUrl))
  }

  lazy val navigateToAgentStub: HttpRequestBuilder =
    http("Navigate to Agent stub")
      .get(signInUrl)
      .check(saveCsrfToken)
      .check(status.is(200))
      .check(regex("Sign in"))

  //  lazy val enrolment: HttpRequestBuilder =
  //    http("Give enrolment")
  //  .put("/enrolment-store-proxy/enrolment-store/enrolments/:HMRC-CUS-ORG")

  lazy val enrolment: HttpRequestBuilder =
    http("Give enrolment")
      .put(baseUrlExternalStubs + "/agents-external-stubs/known-facts/:HMRC-CUS-ORG")
      .formParam("csrfToken", "${csrfToken}")
      .formParam("userId", "a")
      .formParam("planetId", "b")
      .formParam("affinityGroup", "individual")
      .check(status.is(201))

  //  http://enrolment-store-proxy.protected.mdtp/enrolment-store-proxy/enrolment-store/
  //  PUT /agents-external-stubs/known-facts/:enrolmentKey

  lazy val signIn: HttpRequestBuilder =
    http("Sign in as user")
      .post(postSignInUrl)
      .formParam("csrfToken", "${csrfToken}")
      .formParam("userId", "a")
      .formParam("planetId", "b")
      .formParam("affinityGroup", "individual")
      .formParam("enrolment[0].key", "HMRC-CUS-ORG")
      .check(status.is(201))

  def destroyUserPlanet: HttpRequestBuilder =
    http("Destroy planet")
      .delete(destroyPlanetUrl)
      //    .header("Authorization", "Bearer ${bearerToken}")
      .check(status.is(204))
      .silent

  val getLandingpage: HttpRequestBuilder = {
    http("Get Landing page")
      .get(s"$homePageUrl")
      .check(status.is(303))
      .check(header("Location").is("/trader-services"))
  }

  val loadLandingpage: HttpRequestBuilder = {
    http("Load content on landing page")
      .get(s"$homePageUrl")
      //      .check(status.is(200))
      //      .check(regex("Trader services"))
      .check(header("Location").is("/trader-services"))
  }

  val getDecDetailsPage: HttpRequestBuilder = {
    http("Get declaration details")
      .get(s"$homePageUrl" + decDetailsUrl)
      .check(status.is(303))
      .check(header("Location").is(decDetailsUrl))
  }


  val postDeclarationDetails: HttpRequestBuilder = {
    http("Post declaration details")
      .post(homePageUrl + decDetailsUrl)
      .formParam("EPU", "${EPU}")
      .formParam("entryNo", "${entryNo}")
      .formParam("entryDay", "${entryDay}")
      .formParam("entryMonth", "${entryMonth}")
      .formParam("entryYear", "${entryYear}")
      .formParam("csrfToken", s"$${csrfToken}")
      .check(status.is(303))
      .check(header("Location").is("/pre-clearance/declaration-details").saveAs("decDetails"))
  }

  val getImportRequestTypePage: HttpRequestBuilder = {
    http("Get Import Request Type Page")
      .get(homePageUrl + importQsPrefix + requestPage)
      .check(status.is(200))
  }

  val postImportRequestTypePage: HttpRequestBuilder = {
    http("Post Import Request Type Page")
      .post(homePageUrl + importQsPrefix + requestPage)
      .formParam("request", "${request}")
      .check(status.is(200))
  }


  val getExportRequestTypePage: HttpRequestBuilder = {
    http("Get Export Request Type Page")
      .get(homePageUrl + exportQsPrefix + requestPage)
      .check(status.is(200))
  }

  val postExportRequestTypePage: HttpRequestBuilder = {
    http("Post Export Request Type Page")
      .post(homePageUrl + importQsPrefix + requestPage)
      .formParam("request", "${request}")
      .check(status.is(200))
  }
}